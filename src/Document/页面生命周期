DOMContentLoaded - 浏览器已完全加载HTML，并构建了DOM树，但像<img>和样式表之类的外部资源可能尚未加载完成
(DOM已经就绪，因此处理程序可以查找DOM节点，并初始化接口)
发生在document对象上，且必须使用addEventListener来监听
document.addEventListener("DOMContentLoaded",ready);

当浏览器处理一个 HTML 文档，并在文档中遇到 <script> 标签时，就会在继续构建 DOM 之前运行它。这是一种防范措施，因为脚本可能想要修改 DOM，甚至对其执行 document.write 操作，所以 DOMContentLoaded 必须等待脚本执行结束。

具有 async 特性（attribute）的脚本不会阻塞 DOMContentLoaded，稍后 我们会讲到。
使用 document.createElement('script') 动态生成并添加到网页的脚本也不会阻塞 DOMContentLoaded。

load - 浏览器不仅加载完成了HTML，还加载完成了所有的外部资源：图片，样式等
(外部资源已加载完成，样式已被应用，图片大小也已知)

window.load = function(){}

beforeunload - 当用户正在离开页面
（检查用户是否保存了更改，并询问他是否真的要离开）
window.onbeforeunload = function(){}


unload - 用户几乎已经离开，但是我们仍然可以启动一些操作，例如发送统计数据
window.onunload = function(){}

document.readyState
loading - 文档正在被加载
interactive - 文档被全部读取
complete - 文档被全部读取，并且所有资源都已加载完成

